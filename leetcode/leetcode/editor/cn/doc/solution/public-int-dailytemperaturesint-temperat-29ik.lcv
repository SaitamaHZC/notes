思路： 一看题目很简单哈，嵌套循环遍历比大小不就好了
一把梭哈，超时了

* 

```
public int[] dailyTemperatures(int[] temperatures) {
    int length = temperatures.length;
    int[] result = new int[length];
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if(temperatures[j] > temperatures[i]){
                result[i] = j - i;
                break;
            }
        }
    }
    return result;
}
```

思路二： 改进版，你会发现在超时的案例中其实做了很多无效校验
我想我可以优化一些无效比较
首先我们要倒序比较，
首先最后一个肯定是0，
如果前面一个小于后面一个，那么很简单就是1
如果前面一个等于后面一个，那么就是后面一个的结果+1天，这里有个特殊情况，如果后面一个是0，那么前面一个还是0不能+1
如果前面一个大于后面一个这个时候只能循环遍历了
这个提交成功但是用了254 ms，也快超时了

* 

```
public int[] dailyTemperatures(int[] temperatures) {
    int length = temperatures.length;
    int[] result = new int[length];
    for (int i = length - 2; i >= 0; i--) {
        if(temperatures[i] < temperatures[i + 1]){
            result[i] = 1;
        }else if(temperatures[i] == temperatures[i + 1]){
            if(result[i + 1] != 0){
                result[i] = result[i + 1] + 1;
            }
        }else {
            for (int j = i + 1; j < length; j++) {
                if(temperatures[j] > temperatures[i]){
                    result[i] = j - i;
                    break;
                }
            }
        }

    }
    return result;
}
```

思路三： 单调栈
重点：栈底到栈顶是依次递减的这个非常重要
这个确实非常优秀，不需要循环比较，做到了真正的只比较一次

* 

```
public int[] dailyTemperatures(int[] temperatures) {
    int length = temperatures.length;
    Deque<Integer> stack = new LinkedList<>();
    int result[] = new int[length];
    for (int i = 0; i < length; i++) {
        // 如果栈为空，则直接入栈
        // 如果栈不为空，则比较栈顶数据
        //      1. 小于或等于（直接入栈）
        //      2. 如果大于栈顶，则依次比较直到栈顶数据，直到小于或等于栈顶（或为空），最后自己入栈
        // 栈底到栈顶是依次递减的这个非常重要
        while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]){
            Integer pop = stack.pop();
            result[pop] = i - pop;
        }
        stack.push(i);
    }
    return result;
}
```

