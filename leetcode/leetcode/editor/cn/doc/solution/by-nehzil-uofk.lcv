**思路分析==》辅助栈**
对于栈来说，如果一个元素 a 在入栈时，栈里有其它的元素 b, c, d，那么无论这个栈在之后经历了什么操作，只要 a 在栈中，b, c, d 就一定在栈中，因为在 a 被弹出之前，b, c, d 不会被弹出。
因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 a, b, c, d。
`那么，我们可以在每个元素 a 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 a，我们就可以直接返回存储的最小值 m。`
**说明**

* 

```
说明：按照上面的思路，我们只需要设计一个数据结构，使得每个元素 a 与其相应的最小值 m 时刻
保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的
最小值。
```

**算法：**
- 当一个元素要入栈时，我们**取当前辅助栈的栈顶存储的最小值**，与*当前元素比较得出最小值*，将这个最小值插入辅助栈中；
- 当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；
- 在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。

![image.png](https://pic.leetcode-cn.com/1650469898-solthm-image.png)

* 

```
class MinStack {
public:
    /* 定义两个栈容器 */
    stack<int> st;
    stack<int> minStack;

    /** 构造函数清空栈容器  */
    MinStack() {
        while(!st.empty()) {
            st.pop();
        }
        while(!minStack.empty()) {
            minStack.pop();
        }
        /* 初始化最小栈的栈顶元素为最大值为了防止top访问空指针报错 */
        minStack.push(INT_MAX);
    }
    
    void push(int x) {
        st.push(x);
        /* 比较最小栈的栈顶的值和当前值val的大小，将最小值押入最小栈也就是记录了当前st栈的最小值为栈顶元素 */
        int minVal = std::min(minStack.top(), x);
        /* 将最小值押入最小栈 */
        minStack.push(minVal);
    }
    
    void pop() {
        /* 弹出两个栈的栈顶元素 */
        st.pop();
        minStack.pop();
    }
    
    int top() {
        return st.top();
    }
    
    int min() {
        /* 取最小栈的栈顶元素就是此时st栈的最小值 */
        return minStack.top();
    }
};
```

同样的解题思路可以解决下面这道题目
[题目：716. 最大栈](https://leetcode-cn.com/problems/max-stack/)

* 

```
class MaxStack {
private:
    stack<int> st;
    stack<int> maxStack;
public:
    MaxStack() {
    }
    
    void push(int x) {
        int max = maxStack.empty() ? x : maxStack.top();
        maxStack.push(max > x ? max : x);
        st.push(x);
    }
    
    int pop() {
        maxStack.pop();
        int top = st.top();
        st.pop();
        return top;
    }
    
    int top() {
        return st.top();
    }
    
    int peekMax() {
        return maxStack.top();
    }
    
    int popMax() {
        stack<int> buffer;
        int res = maxStack.top();
        while (st.top() < res) {
            buffer.push(st.top());
            st.pop();
            maxStack.pop();
        }
        st.pop();
        maxStack.pop();
        while (!buffer.empty()) {
            this->push(buffer.top());
            buffer.pop();
        }
        return res;
    }
};

```

