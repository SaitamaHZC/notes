执行用时：120 ms, 在所有 C++ 提交中击败了99.93%的用户
内存消耗：107.6 MB, 在所有 C++ 提交中击败了98.03%的用户
通过测试用例：88 / 88

### 解题思路

找到中间的两个对称的结点，然后用两个指针分别指向他们，相当于两个新链表的表头，然后将前半部分转向，最后比较

### 代码

* cpp

```cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *p = head;
        int cnt = 0;
        while(p){  //计算所有结点的个数 cnt
            cnt++;
            p = p->next;
        }
        if(cnt == 1) return true;
        if(cnt == 2) return head->val == head->next->val;
        if(cnt == 3) return head->val == head->next->next->val;

        ListNode *h1,*h2;
        int cur = 1;
        p = head;
        while(p){  //把链表切开，用h1和h2指向中间的两个结点
            if(cur == cnt/2){
                // cout<<cur<<"--"<<p->val<<endl;
                h1 = p;
                // cout<<h1->val<<endl;
                if(cnt%2 == 1){
                    h2 = p->next->next;
                }
                else{
                    h2 = p->next;
                }
                break;
            }
            p = p->next;
            cur++;
        }

        if(cur == 2){
            head->next = NULL;
            h1->next = head;
        }else{  //将h1所有的结点反向
            ListNode *l1=head,*l2=head->next,*l3=head->next->next;
            head->next = NULL;
            while(l2 != h1){
                l2->next = l1;
                l1 = l2;
                l2 = l3;
                l3 = l3->next;
            }
            l2->next = l1;
        }

        while(h1 || h2){  //比较h1和h2的所有结点是否相等
            if(h1->val != h2->val){
                return false;
            }
            h1 = h1->next;
            h2 = h2->next;
        }
        
        return true;
    }
};
```

