> Problem: [155. 最小栈](https://leetcode.cn/problems/min-stack/description/)

[TOC]

# 思路

> (代码中有注释,很好懂)使用数组实现栈,简单！ 但缺点是用了时间换了空间

# 解题方法

> 创建一个数组,初始化一个整数表示栈顶指针

# 复杂度

- 时间复杂度:

> 抱歉,我还不会算这个时间复杂度 有知道的可以好心给我说说 放评论里 我可以看哈哈

- 空间复杂度:

> 空间复杂度是常数阶 O(l) ,因为开辟了一个固定空间的数组

# Code

* []

```Java

class MinStack {
    private int[] stackArr;
    private int topPoint;//指向栈顶

    public MinStack() {
        stackArr = new int[1000];
        topPoint = 0; //初始化栈顶为0
    }
    
    public void push(int val) {
        if(isFull()){
            System.out.println("栈已满,无法入栈...");
            return;
        }
        //如果栈未满 则将其入栈
        stackArr[topPoint++] = val;
    }
    
    public void pop() {
        if(isEmpty()){
            System.out.println("栈为空....");
            return;
        }
        topPoint--;//栈不为空时,每取出一个数据 就将栈顶指针--
    }
    
    public int top() {//查看栈顶指针
        if(isEmpty()){
            System.out.println("栈空...");
            return -1;
        }
        //由于入栈后将topPoint++了 故查看栈顶时,应该返回其前一个下标的数值
        return stackArr[topPoint -1];
    }
    
    public int getMin() {//获取栈中最小元素
    //注意 这里的栈顶元素是 topPoint对应下标的前一个数
        int minVal = stackArr[topPoint - 1];//先假设栈顶元素最小
        //遍历栈 从栈顶往下遍历
        for(int i = topPoint - 1; i >= 0; i--){
            //如果有比栈顶小的元素 就将minVal替换
            if(stackArr[i] < minVal){
                minVal = stackArr[i];
            }
        }
        return minVal;//返回栈中最小元素
    }

    public boolean isFull(){
        return topPoint == stackArr.length;
    }

    public boolean isEmpty(){
        return topPoint == 0;
    }

}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
```

